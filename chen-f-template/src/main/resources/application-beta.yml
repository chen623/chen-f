server:
  port: 8080
  max-http-header-size: 6898988
  connection-timeout: 2m
  http2:
    enabled: true
  servlet:
    session:
      timeout: 30m

  error:
    path: /error
    includeException: true
    includeStacktrace: ALWAYS

logging:
  config: classpath:log4j2.xml

spring:
  main:
    banner-mode: console
#    allow-bean-definition-overriding: true

  devtools:
    restart:
      enabled: true

  webflux:
    date-format: yyyyMMddhhmmss

  mvc:
    date-format: yyyyMMddhhmmss
    #抛出404异常,默认不抛出404异常,会转发到/error
    throw-exception-if-no-handler-found: false
  resources:
    #是否使用默认资源映射
    add-mappings: true

  jackson:
    date-format: yyyy-MM-dd HH:mm:ss
    joda-date-time-format: yyyy-MM-dd HH:mm:ss
    time-zone: GMT+8
    serialization:
      WRITE_DATES_AS_TIMESTAMPS: false


  redis:
    database: 0
    host: 127.0.0.1
    port: 6379
    password: 123456
    timeout: 2m
    lettuce:
      pool:
        # 连接池最大连接数（使用负值表示没有限制）
        max-active: 8
        # 连接池中的最大空闲连接
        max-idle: 8
        # 连接池最大阻塞等待时间（使用负值表示没有限制）
        max-wait: -2s
        # 连接池中的最小空闲连接
        min-idle: 0

  session:
    store-type: redis
    timeout: 60m

  cache:
    type: redis
    redis:
      time-to-live: 24h
      cache-null-values: true
      key-prefix: cache

  quartz:
    scheduler-name: quartz
    auto-startup: true
    startup-delay: 0s
    wait-for-jobs-to-complete-on-shutdown: true
    overwrite-existing-jobs: true
    job-store-type: jdbc
    jdbc:
      initialize-schema: never
    properties:
      org.quartz.scheduler.instanceName: quartz
      #集群中每个实例都要唯一
      org.quartz.scheduler.instanceId: AUTO
      #是否调过版本更新检查
      org.quartz.scheduler.skipUpdateCheck: true
      org.quartz.scheduler.jobFactory.class: org.springframework.scheduling.quartz.SpringBeanJobFactory
      #线程
      org.quartz.threadPool.class: org.quartz.simpl.SimpleThreadPool
      org.quartz.threadPool.threadCount: 20
      org.quartz.threadPool.threadPriority: 5
      org.quartz.scheduler.threadName: quartz
      org.quartz.threadPool.threadNamePrefix: quartz
      #线程继承初始化线程的上下文类加载器
      org.quartz.threadPool.threadsInheritContextClassLoaderOfInitializingThread: true
      #Cluster开启集群
      org.quartz.jobStore.isClustered: true
      org.quartz.jobStore.class: org.quartz.impl.jdbcjobstore.JobStoreTX
      #数据库方言
      org.quartz.jobStore.driverDelegateClass: org.quartz.impl.jdbcjobstore.StdJDBCDelegate
      org.quartz.jobStore.tablePrefix: QRTZ_
      #调度实例失效的检查时间间隔
      org.quartz.jobStore.clusterCheckinInterval: 200000
      org.quartz.jobStore.dontSetAutoCommitFalse: false
      org.quartz.jobStore.selectWithLockSQL: SELECT * FROM {0}LOCKS WHERE LOCK_NAME = ? FOR UPDATE
      org.quartz.jobStore.txIsolationLevelSerializable: false
      org.quartz.jobStore.acquireTriggersWithinLock: false
      org.quartz.scheduler.batchTriggerAcquisitionMaxCount: 50

mybatis-plus:
  #MyBatis 配置文件位置
  #config-location: classpath:mybatis-config.xml
  #MyBatis Mapper 所对应的 XML 文件位置
#    mapper-locations: classpath*:mybatis/mapper/xml/*
  #MyBaits 别名包扫描路径，通过该属性可以给包中的类注册别名，注册后在 Mapper 对应的 XML 文件中可以直接使用类名，而不用使用全限定的类名（即 XML 中调用的时候不用包含包名）。
#  type-aliases-package: com.chen.f.core.pojo,com.chen.f.admin.pojo,
  #该配置请和 typeAliasesPackage 一起使用，如果配置了该属性，则仅仅会扫描路径下以该类作为父类的域对象 。
#  type-aliases-super-type: java.lang.Object
  #TypeHandler 扫描路径，如果配置了该属性，SqlSessionFactoryBean 会把该包下面的类注册为对应的 TypeHandler。
#  type-handlers-package: com.baomidou.mybatisplus.extension.handlers.EnumAnnotationTypeHandler.class
  #枚举类 扫描路径，如果配置了该属性，会将路径下的枚举类进行注入，让实体类字段能够简单快捷的使用枚举属性，具体使用请结合 枚举注入 查看
  #  type-enums-package: com.chen.f.core.pojo.enums,com.chen.f.core.pojo.enums
  #启动时是否检查 MyBatis XML 文件的存在，默认不检查。
  check-config-location: false
  #通过该属性可指定 MyBatis 的执行器，MyBatis 的执行器总共有三种：
  #ExecutorType.SIMPLE：该执行器类型不做特殊的事情，为每个语句的执行创建一个新的预处理语句（PreparedStatement）
  #ExecutorType.REUSE：该执行器类型会复用预处理语句（PreparedStatement）
  #ExecutorType.BATCH：该执行器类型会批量执行所有的更新语句
  executor-type: simple
  #指定外部化 MyBatis Properties 配置，通过该配置可以抽离配置，实现不同环境的配置部署。
#  configuration-properties: classpath:mybatis/config.properties
  # 原生 MyBatis 所支持的配置
  configuration:
    #是否开启自动驼峰命名规则（camel case）映射，即从经典数据库列名 A_COLUMN 到经典 Java 属性名 aColumn 的类似映射。
    map-underscore-to-camel-case: true
    #当设置为 true 的时候，懒加载的对象可能被任何懒属性全部加载，否则，每个属性都按需加载。需要和 lazyLoadingEnabled 一起使用。
    aggressive-lazy-loading: false
    lazy-loading-enabled: false
    #MyBatis 自动映射策略，通过该配置可指定 MyBatis 是否并且如何来自动映射数据表字段与对象的属性，总共有 3 种可选值：
    #AutoMappingBehavior.NONE：不启用自动映射
    #AutoMappingBehavior.PARTIAL：只对非嵌套的 resultMap 进行自动映射
    #AutoMappingBehavior.FULL：对所有的 resultMap 都进行自动映射
    auto-mapping-behavior: partial
    #MyBatis 自动映射时未知列或未知属性处理策略，通过该配置可指定 MyBatis 在自动映射过程中遇到未知列或者未知属性时如何处理，总共有 3 种可选值：
    #AutoMappingUnknownColumnBehavior.NONE：不做任何处理 (默认值)
    #AutoMappingUnknownColumnBehavior.WARNING：以日志的形式打印相关警告信息
    #AutoMappingUnknownColumnBehavior.FAILING：当作映射失败处理，并抛出异常和详细信息
    auto-mapping-unknown-column-behavior: none
    #全局地开启或关闭配置文件中的所有映射器已经配置的任何缓存，默认为 true。
    cache-enabled: false
    #指定当结果集中值为 null 的时候是否调用映射对象的 Setter（Map 对象时为 put）方法，通常运用于有 Map.keySet() 依赖或 null 值初始化的情况。
    #通俗的讲，即 MyBatis 在使用 resultMap 来映射查询结果中的列，如果查询结果中包含空值的列，则 MyBatis 在映射的时候，不会映射这个字段，这就导致在调用到该字段的时候由于没有映射，取不到而报空指针异常。
    call-setters-on-nulls: true
    #指定一个提供 Configuration 实例的工厂类。该工厂生产的实例将用来加载已经被反序列化对象的懒加载属性值，其必须包含一个签名方法static Configuration getConfiguration()。（从 3.2.3 版本开始）
#    configuration-factory:
    #MyBatis-Plus 全局策略配置
  global-config:
    banner: true
    # MyBatis-Plus 全局策略中的 DB 策略配置，
    db-config:
      #是否开启大写命名，默认不开启。
      capital-mode: false
      #全局默认主键类型 AUTO:"数据库ID自增", INPUT:"用户输入ID",ID_WORKER:"全局唯一ID (数字类型唯一ID)", UUID:"全局唯一ID UUID";
      id-type: id_worker_str
      #字段策略 IGNORED:"忽略判断",NOT_NULL:"非 NULL 判断"),NOT_EMPTY:"非空判断"
      field-strategy: not_empty
      #表名、是否使用下划线命名（默认 true:默认数据库表下划线命名）
      table-underline: true
      #表名前缀
      table-prefix:
      #逻辑已删除值,(逻辑删除下有效)
      logic-delete-value: 1
      #逻辑未删除值,(逻辑删除下有效)
      logic-not-delete-value: 0



